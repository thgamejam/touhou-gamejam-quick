// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package v1

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DownloadClient is the client API for Download service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DownloadClient interface {
	GetDownloadURL(ctx context.Context, in *GetDownloadRequest, opts ...grpc.CallOption) (*GetDownloadReply, error)
}

type downloadClient struct {
	cc grpc.ClientConnInterface
}

func NewDownloadClient(cc grpc.ClientConnInterface) DownloadClient {
	return &downloadClient{cc}
}

func (c *downloadClient) GetDownloadURL(ctx context.Context, in *GetDownloadRequest, opts ...grpc.CallOption) (*GetDownloadReply, error) {
	out := new(GetDownloadReply)
	err := c.cc.Invoke(ctx, "/api.download.v1.Download/GetDownloadURL", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DownloadServer is the server API for Download service.
// All implementations must embed UnimplementedDownloadServer
// for forward compatibility
type DownloadServer interface {
	GetDownloadURL(context.Context, *GetDownloadRequest) (*GetDownloadReply, error)
	mustEmbedUnimplementedDownloadServer()
}

// UnimplementedDownloadServer must be embedded to have forward compatible implementations.
type UnimplementedDownloadServer struct {
}

func (UnimplementedDownloadServer) GetDownloadURL(context.Context, *GetDownloadRequest) (*GetDownloadReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetDownloadURL not implemented")
}
func (UnimplementedDownloadServer) mustEmbedUnimplementedDownloadServer() {}

// UnsafeDownloadServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DownloadServer will
// result in compilation errors.
type UnsafeDownloadServer interface {
	mustEmbedUnimplementedDownloadServer()
}

func RegisterDownloadServer(s grpc.ServiceRegistrar, srv DownloadServer) {
	s.RegisterService(&Download_ServiceDesc, srv)
}

func _Download_GetDownloadURL_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetDownloadRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DownloadServer).GetDownloadURL(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.download.v1.Download/GetDownloadURL",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DownloadServer).GetDownloadURL(ctx, req.(*GetDownloadRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Download_ServiceDesc is the grpc.ServiceDesc for Download service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Download_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "api.download.v1.Download",
	HandlerType: (*DownloadServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetDownloadURL",
			Handler:    _Download_GetDownloadURL_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/download/v1/download.proto",
}
