// Code generated by protoc-gen-go-http. DO NOT EDIT.
// versions:
// protoc-gen-go-http v2.0.5

package v1

import (
	context "context"
	http "github.com/go-kratos/kratos/v2/transport/http"
	binding "github.com/go-kratos/kratos/v2/transport/http/binding"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
var _ = new(context.Context)
var _ = binding.EncodeURL

const _ = http.SupportPackageIsVersion1

type GameHTTPServer interface {
	CreateGame(context.Context, *CreateGameRequest) (*CreateGameReply, error)
	DeleteGame(context.Context, *DeleteGameRequest) (*DeleteGameReply, error)
	GetGame(context.Context, *GetGameRequest) (*GetGameReply, error)
	ListGame(context.Context, *ListGameRequest) (*ListGameReply, error)
	UpdateGame(context.Context, *UpdateGameRequest) (*UpdateGameReply, error)
}

func RegisterGameHTTPServer(s *http.Server, srv GameHTTPServer) {
	r := s.Route("/")
	r.PUT("/api/v1/game", _Game_CreateGame0_HTTP_Handler(srv))
	r.PUT("/api/v1/game/{id}", _Game_UpdateGame0_HTTP_Handler(srv))
	r.DELETE("/api/v1/game/{id}", _Game_DeleteGame0_HTTP_Handler(srv))
	r.GET("/api/v1/game/{id}", _Game_GetGame0_HTTP_Handler(srv))
	r.GET("/api/v1/game/list/{page}", _Game_ListGame0_HTTP_Handler(srv))
}

func _Game_CreateGame0_HTTP_Handler(srv GameHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in CreateGameRequest
		if err := ctx.Bind(&in.Body); err != nil {
			return err
		}
		http.SetOperation(ctx, "/touhou.api.game.v1.Game/CreateGame")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.CreateGame(ctx, req.(*CreateGameRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*CreateGameReply)
		return ctx.Result(200, reply)
	}
}

func _Game_UpdateGame0_HTTP_Handler(srv GameHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in UpdateGameRequest
		if err := ctx.Bind(&in.Body); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/touhou.api.game.v1.Game/UpdateGame")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.UpdateGame(ctx, req.(*UpdateGameRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*UpdateGameReply)
		return ctx.Result(200, reply)
	}
}

func _Game_DeleteGame0_HTTP_Handler(srv GameHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in DeleteGameRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/touhou.api.game.v1.Game/DeleteGame")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.DeleteGame(ctx, req.(*DeleteGameRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*DeleteGameReply)
		return ctx.Result(200, reply)
	}
}

func _Game_GetGame0_HTTP_Handler(srv GameHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in GetGameRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/touhou.api.game.v1.Game/GetGame")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.GetGame(ctx, req.(*GetGameRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*GetGameReply)
		return ctx.Result(200, reply)
	}
}

func _Game_ListGame0_HTTP_Handler(srv GameHTTPServer) func(ctx http.Context) error {
	return func(ctx http.Context) error {
		var in ListGameRequest
		if err := ctx.BindQuery(&in); err != nil {
			return err
		}
		if err := ctx.BindVars(&in); err != nil {
			return err
		}
		http.SetOperation(ctx, "/touhou.api.game.v1.Game/ListGame")
		h := ctx.Middleware(func(ctx context.Context, req interface{}) (interface{}, error) {
			return srv.ListGame(ctx, req.(*ListGameRequest))
		})
		out, err := h(ctx, &in)
		if err != nil {
			return err
		}
		reply := out.(*ListGameReply)
		return ctx.Result(200, reply)
	}
}

type GameHTTPClient interface {
	CreateGame(ctx context.Context, req *CreateGameRequest, opts ...http.CallOption) (rsp *CreateGameReply, err error)
	DeleteGame(ctx context.Context, req *DeleteGameRequest, opts ...http.CallOption) (rsp *DeleteGameReply, err error)
	GetGame(ctx context.Context, req *GetGameRequest, opts ...http.CallOption) (rsp *GetGameReply, err error)
	ListGame(ctx context.Context, req *ListGameRequest, opts ...http.CallOption) (rsp *ListGameReply, err error)
	UpdateGame(ctx context.Context, req *UpdateGameRequest, opts ...http.CallOption) (rsp *UpdateGameReply, err error)
}

type GameHTTPClientImpl struct {
	cc *http.Client
}

func NewGameHTTPClient(client *http.Client) GameHTTPClient {
	return &GameHTTPClientImpl{client}
}

func (c *GameHTTPClientImpl) CreateGame(ctx context.Context, in *CreateGameRequest, opts ...http.CallOption) (*CreateGameReply, error) {
	var out CreateGameReply
	pattern := "/api/v1/game"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/touhou.api.game.v1.Game/CreateGame"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in.Body, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *GameHTTPClientImpl) DeleteGame(ctx context.Context, in *DeleteGameRequest, opts ...http.CallOption) (*DeleteGameReply, error) {
	var out DeleteGameReply
	pattern := "/api/v1/game/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/touhou.api.game.v1.Game/DeleteGame"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "DELETE", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *GameHTTPClientImpl) GetGame(ctx context.Context, in *GetGameRequest, opts ...http.CallOption) (*GetGameReply, error) {
	var out GetGameReply
	pattern := "/api/v1/game/{id}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/touhou.api.game.v1.Game/GetGame"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *GameHTTPClientImpl) ListGame(ctx context.Context, in *ListGameRequest, opts ...http.CallOption) (*ListGameReply, error) {
	var out ListGameReply
	pattern := "/api/v1/game/list/{page}"
	path := binding.EncodeURL(pattern, in, true)
	opts = append(opts, http.Operation("/touhou.api.game.v1.Game/ListGame"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "GET", path, nil, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}

func (c *GameHTTPClientImpl) UpdateGame(ctx context.Context, in *UpdateGameRequest, opts ...http.CallOption) (*UpdateGameReply, error) {
	var out UpdateGameReply
	pattern := "/api/v1/game/{id}"
	path := binding.EncodeURL(pattern, in, false)
	opts = append(opts, http.Operation("/touhou.api.game.v1.Game/UpdateGame"))
	opts = append(opts, http.PathTemplate(pattern))
	err := c.cc.Invoke(ctx, "PUT", path, in.Body, &out, opts...)
	if err != nil {
		return nil, err
	}
	return &out, err
}
